class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans=new ArrayList<>();
         char[][] chess = new char[n][n];
        // . stands for empty position
        // Q stands for occupied position
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                chess[i][j] = '.';
            }
        }
        printNQueens(chess,ans,0);
        return ans;
    }

    public static void printNQueens(char[][] chess, List<List<String>> ans, int row) {
        if(row==chess.length){
        ans.add(build(chess));
        return;}
        
        for(int col=0;col<chess.length;col++){
            if(isItSafe(chess,row,col)){
                chess[row][col]='Q';
                printNQueens(chess,ans,row+1);
                chess[row][col]='.';
            }
        }
    }

//We'll check from last row, 
    
    public static boolean isItSafe(char[][]arr,int row,int col){
        for(int i=row-1,j=col;i>=0;i--){
            if(arr[i][j]=='Q')return false;
        }
        for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
            if(arr[i][j]=='Q')return false;
        }
        for(int i=row-1,j=col+1;i>=0 && j<arr.length;i--,j++){
            if(arr[i][j]=='Q')return false;
        }
        return true; 
        
    }
       static private List<String> build(char[][] chess) {
        List<String> path = new ArrayList<>();
        for (int i = 0; i < chess.length; i++) {
            path.add(new String(chess[i]));
        }
        return path;
    }
    
}
