class TrieNode{
    private char c;
    private TrieNode[] children = new TrieNode[26];
    private boolean isLeaf;
    public TrieNode(char c){
        this.c = c;
    }
    public void setLeaf(boolean flag){
        this.isLeaf = flag;
    }
    public char getChar(){ return this.c; }
    public boolean isLeaf() { return this.isLeaf; }
    public TrieNode[] getChildren(){ return this.children; }
}
class Solution {
    public TrieNode getTheLastNode(TrieNode root, char c){
        if(root==null)
            return null;
        TrieNode[] children = root.getChildren();
        return children[c-97];
    }
    public void insert(TrieNode root, String word){
        for(char w: word.toCharArray()){
            TrieNode[] children = root.getChildren();
            if(children[w-97]==null){
                TrieNode node = new TrieNode(w);
                children[w-97] = node;
                root = children[w-97];
            }else{
                root = children[w-97];
            }
        }
        root.setLeaf(true);
    }
    public void getAllWordsFromNode(TrieNode node, String prefix, List<String> out){
        if(node==null || out.size()==3)
            return;
        if(node.isLeaf()){
            out.add(prefix);
        }
        TrieNode[] children = node.getChildren();
        for(int i=0;i<26;i++){
            if(children[i]!=null){
                getAllWordsFromNode(children[i], prefix+(char)(i+97),out);
            }
        }
    }
    public List<List<String>> suggestedProducts(String[] products, String searchWord) {
        TrieNode root = new TrieNode('\0');
        for(String product:products)
            insert(root, product);
        List<List<String>> out = new ArrayList<>();
        StringBuilder prefix = new StringBuilder();
        TrieNode node = root;
        for(char c: searchWord.toCharArray()){
            List<String> curr = new ArrayList<>();
            prefix.append(c);
            node = getTheLastNode(node, c);
            getAllWordsFromNode(node, prefix.toString(), curr);
            out.add(curr);
        }
        return out;
    }
}
